

----Business problems------

----Q1. Top selling products(query the top 10 products by total sales value)
--challenge: Include product name,total quantity sold and total sales value
--order_items - oi
--orders -o
--product -pr

Select 
oi.product_id,
p.product_name,
sum(oi.total_sale) as Total_Sales,
count(o.order_id) as Total_orders

from orders as o
join
order_items as oi
on oi.order_id=o.order_id
join 
products as p
on p.product_id=oi.product_id

group by 1,2
order by 4 desc
Limit 10;

---Q2.Revenue by category
-- calculate total revenue generated by each product category.
--challenge: Include the percentage contribution of each category to total revenue.
--to solve we need category_id,category_name_total_revenue,total contribution

select
p.category_id,
c.category_name,
sum(oi.total_sale) as Total_sales,
sum(oi.total_sale)/(select sum(total_sale)from order_items) * 100 as Contribution

from order_items as oi
join 
products as p
on p.product_id =oi.product_id
left join category as c
on c.category_id = p.category_id
Group by p.category_id,c.category_name
Order by Total_sales desc;


---Q3. Average order value
--compute the average order value for each customer.
--challenge: Include only customer with more than equel 5 orders

Select
c.customer_id,
CONCAT(c.first_name,' ', c.last_name) as Full_Name,
sum(total_sale)/count(o.order_id) as Average_oder_value,
count(o.order_id) as total_orders

from orders as o
join
customers as c
ON  c.customer_id = o.customer_id
join 
order_items as oi
ON oi.order_id = o.order_id
group by 1,2
Having count(o.order_id)>=5;


---Q4. Monthly sales trend
--query monthly total sales over past year.
--challenge: Display the sales trend,grouping by month,return current_month sale,last month sales

select
year,
month,
total_sales as Current_Month_sales,
LAG(total_sales,1)  over(Order by year,month) as last_month_sale,
ROUND(
        (total_sales - LAG(total_sales, 1) OVER (ORDER BY year, month)) / 
        NULLIF(LAG(total_sales, 1) OVER (ORDER BY year, month), 0) * 100, 
        2
    ) AS growth_percentage
from

(select
extract(Month From order_date) as Month,
extract(year from order_date)as year,
sum(oi.total_sale) as Total_sales
from orders as o
join order_items oi
ON oi.order_id =o.order_id
WHERE o.order_date BETWEEN '2024-01-01' AND '2024-12-31'
Group by 1,2
order by 1) AS T1; 

---Q5.customer with no purchase
--Find customer those who have registered but never place an order.

Select * from customers
						where customer_id not in (select
						distinct customer_id
						from orders);

--approach 2

select * from
customers as c
left join orders as o
ON c.customer_id=o.customer_id
where o.customer_id is null;

---Q6.Best selling categories by state
--Identify the best selling category for each state
--challenge: Include the total sales for that category for each state

With Ranking_table
as
(Select
c.state,
cat.category_name,
sum(oi.total_sale)as Total_sales,
Rank() Over(partition by c.state order by sum(oi.total_sale) desc) as Product_rank

from orders as o
join customers as c
ON o.customer_id=c.customer_id
join
order_items as oi
On oi.order_id=o.order_id
join products as p
On oi.product_id=p.product_id
join category as cat
On cat.category_id=p.category_id
Group by 1,2
)

select*from Ranking_table
where product_rank=1;

---Q7.Customer lifetime value(CLTV)/ highest spending customers
--calculate the total value of orders  placed by each customer over their lifetime
--challenge : Rank customers based on their lifetime value

Select
c.customer_id,
CONCAT (c.first_name,' ',c.last_name) as full_name,
sum (total_sale) as CLTV,
DENSE_RANK () over (ORDER BY SUM(total_sale)desc) as customer_ranking
from orders as o
join 
customers as c
ON c.customer_id=o.customer_id
Join
order_items as oi
On oi.order_id=o.order_id
group by c.customer_id,c.first_name,c.last_name
order by CLTV desc;

---Q8.Inventory Stock Alerts
--Query products with stock level below a certain threshold (e.g..,less than 10 units)
--challenge: Include last restock date and warehouse information

select 
i.inventory_id,
p.product_name,
i.stock as Current_stock_left,
i.last_stock_date,
i.warehouse_id
 
from inventory as i
join products as p
ON p.product_id=i.product_id
where stock<10;

---Q9.Shipping delays
--Identify order where the shipping date is later than 10 days after the order date
--challege: Include customer,order details and delivery provider

select
c.*, 
o.*,
s.shipping_provider,
(s.shipping_date - o.order_date) as days_took_to_shipped
from orders as o
join
customers as c
On c.customer_id=o.customer_id
join
shippings as s
On o.order_id=s.order_id

where s.shipping_date - o.order_date > 10;

---Q10.Payment Success rate
--calculate the percentage of successfull payments across all orders.
--challenge: Include breakdowns by payment status(e.g., failed,pending)

SELECT 
    p.payment_status,
    COUNT(*) AS total_count,
    --COUNT(*) * 100.0 / (SELECT COUNT(*) FROM payments) AS percentage
	CONCAT(ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders), 2), '%') AS percentage_of_orders
FROM 
    orders AS o 
JOIN
    payments AS p ON o.order_id = p.order_id
GROUP BY 
    p.payment_status;

---Q11.Top performing sellers
--find the top 5 sellers based on total sales values
--challenge: Include both successfull and failed orders, and display their percentage of successfull orders.




WITH top_sellers AS (
    SELECT 
        s.seller_id,
        s.seller_name,
        SUM(oi.total_sale) AS total_sales
    FROM orders AS o
    JOIN sellers AS s ON s.seller_id = o.seller_id
    JOIN order_items AS oi ON oi.order_id = o.order_id 
    GROUP BY s.seller_id, s.seller_name
    ORDER BY total_sales DESC
    LIMIT 5
),

seller_reports AS (
    SELECT 
        o.seller_id,
        ts.seller_name,
        o.order_status,
        COUNT(*) AS total_orders
    FROM orders AS o
    JOIN top_sellers AS ts ON ts.seller_id = o.seller_id
    WHERE o.order_status NOT IN ('Inprogress')
    GROUP BY o.seller_id, ts.seller_name, o.order_status
)

SELECT
    seller_id,
    seller_name,
    SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) AS Completed_order,
    SUM(CASE WHEN order_status = 'Returned' THEN total_orders ELSE 0 END) AS Returned_order,
    SUM(total_orders) AS total_orders,
	Round(SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100,2) as Succesfull_order_percentage
	
FROM seller_reports
GROUP BY seller_id, seller_name;

---Q12.Product profit margin
--Calculate the profit margin for each product (difference between price and cost of goods sold).
--Challenges: Rank products by their profit margin,showing higest to lowest

--(Group by Product_ID sum(total_sale-cogs*quantity) as profit
Select 
product_id,
product_name,
profit_margin,
DENSE_RANK() OVER(ORDER BY profit_margin DESC) as margin_Rank
from
 (Select  
 p.product_id,
 p.product_name,
 --sum(total_sale - (p.cogs*oi.quantity))as profit,
 sum(total_sale - (p.cogs*oi.quantity))/sum(total_sale)*100 as profit_margin
 --DENSE_RANK() OVER(ORDER BY SUM (total_sale - (p.cogs*oi.quantity))DESC) as product_ranking
 From 
 order_items as oi
 Join
 products as p
 On p.product_id=oi.product_id
 Group by 1,2
 ) as t1;



 ---Q13.Most Returned Products
 --Query the top 10 products by the number of returns .
 --Addition info: Display the return rate as percentage of total units sold for each product.


Select
p.product_id,
p.product_name,
count(*) as total_unit_sold,
SUM(CASE WHEN o.order_status ='Returned' THEN 1 ELSE 0 END) as total_returned,
Round(SUM(CASE WHEN o.order_status ='Returned' THEN 1 ELSE 0 END)::numeric / count(*)::numeric * 100,2) as returned_percentage

join
products as p
ON oi.product_id = p.product_id
join orders as o
On o.order_id= oi.order_id
Group by 1,2
order by 4 desc;


---Q15. Inactive Sellers
--Identify sellers who haven't made any sales in the last 6 month
--Addition info: display the last sales date and total sales from those sellers

 With sellers_not_sales
 AS
 (select * from sellers
 where seller_id not in (select seller_id from orders where order_date >= CURRENT_DATE - INTERVAL'6 month')
)
select 
o.seller_id,
MAX(o.order_date) as last_sale_date,
Max(oi.total_sale) as last_sale_amount
from  orders as o
join
sellers_not_sales as sns
ON sns.seller_id = o.seller_id
join order_items as oi
ON o.order_id=oi.order_id
Group by 1;

---Q16.Identify customer into reuturning or new
--if the customer has done more than 5 return categories them as returining otherwise new
--Additional info: List customer_id,name,total orders,total returns

Select 
full_name as customers,
total_orders,
total_return,
CASE 
	WHEN total_return > 5 THEN 'Returning_customer' ELSE 'NEW'
	END as cx_Category
	from

(Select
CONCAT(c.first_name,' ',c.last_name) as full_name,
Count(o.order_id) as total_orders,
SUM (CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) total_return

from orders as o
join
customers as c
ON c.customer_id = o.customer_id
join
order_items as oi
ON  oi.order_id=o.order_id
Group by 1
order by 3 desc
);

---Q17. Top 5 customer by orders in each state
--Identify the top 5 customer with the higest number of orders for each state
--Challenge: Include the number of orders and total sales for each customer.


select * from
	
(Select
c.state,
c.customer_id,
CONCAT(c.first_name,' ',c.last_name) as customers_name,
count(o.order_id) as total_orders,
sum(total_sale),
DENSE_RANK() OVER(partition by c.state order by sum(total_sale)desc) as Rank

from orders as o
join
order_items as oi
ON oi.order_id = o.order_id
join 
customers as c
ON
c.customer_id=o.customer_id

Group by 1,2
) as t1
WHERE t1.Rank <= 5;

--Q18. Revenue by shipping providers
--calculate the total revenue handled by each shipping provider
--Challenge: Include the total number of orders handled 

select 
s.shipping_provider,
count(o.order_id) as order_handled,
sum(oi.total_sale) as total_sales
from orders as o
join order_items as oi
ON oi.order_id = o.order_id
join
shippings as s
ON s.order_id=o.order_id
group by 1;


--Q19. Top 10 product with higest decreasing sales ratio compare to last year 2024 and 2025
--Challenge: product id, product name , category name, 2024 and 2025 sales decrease ratio at end round the result
-- Decrease ratio =(cs-ls)/ls * 100 (cs=current year ls=last year)


With last_year_sale
as
(
Select 
p.product_id,
p.product_name,
sum(total_sale) as sales
from orders as o
join order_items as oi
ON oi.order_id = o.order_id
join
products as p
ON p.product_id=oi.product_id

where extract(year from o.order_date)=2024
Group by 1,2),

current_year_sale as
(
Select 
p.product_id,
p.product_name,
sum(total_sale) as sales
from orders as o
join order_items as oi
ON oi.order_id = o.order_id
join
products as p
ON p.product_id=oi.product_id

where extract(year from o.order_date)=2025
Group by 1,2
)

Select
cs.product_id,
ls.sales as last_year_sales, 
cs.sales as current_year_sales,
cs.sales-ls.sales as sales_diff,
ROUND(((ls.sales - cs.sales) / ls.sales * 100), 2) AS sales_decrease_percentage

from
last_year_sale as ls
Join
current_year_sale as cs
ON
cs.product_id=ls.product_id
where ls.sales > cs.sales
ORDER BY sales_decrease_percentage DESC
Limit 10;


